{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-ns2"
		},
		"azure_mentoring_ns2_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_mentoring_ns2_DB'"
		},
		"azure_mentoring_ns2_DB_DataMart_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_mentoring_ns2_DB_DataMart'"
		},
		"linked_service_azurementoringauns2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linked_service_azurementoringauns2'"
		},
		"linked_service_azurementoringdatalakns2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linked_service_azurementoringdatalakns2'"
		},
		"linked_service_azurementoringstoragens2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linked_service_azurementoringstoragens2'"
		},
		"linked_service_azurementoringstoragens2_online_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linked_service_azurementoringstoragens2_online'"
		},
		"linked_service_onprem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linked_service_onprem'"
		},
		"linked_server_mentoring_key_vault_ns2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-ns2.vault.azure.net/"
		},
		"linked_service_azurementoringdatalakns2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakns2.dfs.core.windows.net/"
		},
		"linked_service_onprem_sqlserver_key_vault_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnOnPrem"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy_to_DB_all_pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "Copy_to_DB_movies_metadata",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_to_DB_movies_metadata",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_to_DB_credits",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_to_DB_credits",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_to_DB_ratings",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_to_DB_ratings",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T20:11:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy_to_DB_movies_metadata')]",
				"[concat(variables('factoryId'), '/pipelines/Copy_to_DB_credits')]",
				"[concat(variables('factoryId'), '/pipelines/Copy_to_DB_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_to_DB_credits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "Copy_to_DB_credits",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies//movies_metadata.csv"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "credits_*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_movies_credits_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_2"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-10T17:33:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies_credits_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_to_DB_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "Copy_to_DB_movies_metadata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies//movies_metadata.csv"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "movies_metadata_*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_movies_movies_metadata_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_2"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T00:18:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies_movies_metadata_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_movies_metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_to_DB_online_purchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "Copy_to_DB_online_purchase",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies//movies_metadata.csv"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE  stg.online_purchase;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_2"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T10:52:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_online_purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_to_DB_ratings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "Copy_to_DB_ratings",
						"description": "TRUNCATE TABLE stg.ratings;",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies//movies_metadata.csv"
							},
							{
								"name": "Destination",
								"value": "stg.movies_metadata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "ratings_part*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_movies_ratings_part_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_rating",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_2"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T00:19:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies_ratings_part_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Failed_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline failed",
							"errorCode": "111111"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-14T16:00:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_files_to_ADLS_raw_movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_files_to_ADLS_raw_movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_to_DB_all_pipelines",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_files_to_ADLS_raw_movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_to_DB_all_pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "copy_files_to_ADLS_raw_movies_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_to_DB_all_pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_files_to_ADLS_raw_movies_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "delete_files_from_ADLS_raw_movies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_files_to_ADLS_raw_movies_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "delete_files_from_ADLS_raw_movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "load_3NF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_to_DB_all_pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_3NF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_0"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T21:14:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copy_files_to_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/pipelines/Copy_to_DB_all_pipelines')]",
				"[concat(variables('factoryId'), '/pipelines/copy_files_to_ADLS_raw_movies_archive')]",
				"[concat(variables('factoryId'), '/pipelines/delete_files_from_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/pipelines/load_3NF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_pipeline_online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_files_json_increment_to_ADLS_raw_online",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_files_json_increment_to_ADLS_raw_online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_to_DB_online_purchase",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_files_json_increment_to_ADLS_raw_online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_to_DB_online_purchase",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "copy_files_to_ADLS_raw_online_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_to_DB_online_purchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_files_to_ADLS_raw_online_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "delete_files_from_ADLS_raw_online",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_files_to_ADLS_raw_online_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "load_3NF_online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "delete_files_from_ADLS_raw_online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "load_3NF_online",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_to_DB_online_purchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_3NF_online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_0"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T11:14:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copy_files_json_increment_to_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/pipelines/Copy_to_DB_online_purchase')]",
				"[concat(variables('factoryId'), '/pipelines/copy_files_to_ADLS_raw_online_archive')]",
				"[concat(variables('factoryId'), '/pipelines/delete_files_from_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/pipelines/load_3NF_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module9_copy_activity_parametrized')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * \nfrom [etl].[tControlMetadata]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_etl_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy files meta-data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": "metadata-drive",
												"wildcardFileName": {
													"value": "@item().SourcePath",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Truncate table ',item().DestinationSchema, '.', item().DestinationTable)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@item().MappingColumns",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ADLS_raw_metadatadrive",
											"type": "DatasetReference",
											"parameters": {
												"SourcePath": {
													"value": "@item().SourcePath",
													"type": "Expression"
												},
												"SourceColumnDelimiter": {
													"value": "@item().SourceColumnDelimiter",
													"type": "Expression"
												},
												"SourceEncoding": {
													"value": "@item().SourceEncoding",
													"type": "Expression"
												},
												"SourceEscapeCharacter": {
													"value": "@item().SourceEscapeCharacter",
													"type": "Expression"
												},
												"SourceQuoteCharacter": {
													"value": "@item().SourceQuoteCharacter",
													"type": "Expression"
												},
												"SourceRowDelimiter": {
													"value": "@item().SourceRowDelimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_DB_movies_stg",
											"type": "DatasetReference",
											"parameters": {
												"DestinationSchema": {
													"value": "@item().DestinationSchema",
													"type": "Expression"
												},
												"DestinationTable": {
													"value": "@item().DestinationTable",
													"type": "Expression"
												},
												"MappingColumns": {
													"value": "@item().MappingColumns",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP AuditLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[insert_audit]",
										"storedProcedureParameters": {
											"copy_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.copyDuration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"diu_value": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"end_time": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"meter_type": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"num_copied_rows": {
												"value": {
													"value": "@activity('Copy files meta-data').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"num_processed_files": {
												"value": {
													"value": "@activity('Copy files meta-data').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"num_read_rows": {
												"value": {
													"value": "@activity('Copy files meta-data').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"parallel_copies_value": {
												"value": {
													"value": "@activity('Copy files meta-data').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"queue_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].profile.queue.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"transfer_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"unit": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azure_mentoring_ns2_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP ErrorsHandling",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[insert_errorlog]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.activityType",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_code": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].Code",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_datetime": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_message": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azure_mentoring_ns2_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "WebFailed",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebGET",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('WebGET').output.value",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"message": "@{activity('Set variable1').output.value} run ID @{pipeline().RunId}",
											"dataFactoryName": "@{pipeline().DataFactory}",
											"pipelineName": "@{pipeline().Pipeline}.",
											"errorMsg": "Error: @{activity('Copy files meta-data').output.errors[0].Message}",
											"receiver": "@{pipeline().parameters.receiver}"
										}
									}
								},
								{
									"name": "WebSuccess",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "WebGETs",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@activity('WebGETs').output.value",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"message": "@{activity('Set variable2').output.value} run ID @{pipeline().RunId}",
											"dataFactoryName": "@{pipeline().DataFactory}",
											"pipelineName": "@{pipeline().Pipeline}",
											"receiver": "@{pipeline().parameters.receiver}"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "status",
										"value": "Status of pipeline Failed"
									}
								},
								{
									"name": "WebGET",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://vault.azure.net"
										}
									}
								},
								{
									"name": "Set variable2",
									"description": "Status of pipeline Success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "status",
										"value": "Status of pipeline Success"
									}
								},
								{
									"name": "WebGETs",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://vault.azure.net"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "Nataliia_Susiak@epam.com"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T15:46:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_etl_tControlMetadata')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_metadatadrive')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_movies_stg')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Module9_copy_activity_parametrized_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * \nfrom [etl].[tControlMetadata]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_etl_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy files meta-data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": "metadata-drive",
												"wildcardFileName": {
													"value": "@item().SourcePath",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Truncate table ',item().DestinationSchema, '.', item().DestinationTable)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@item().MappingColumns",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ADLS_raw_metadatadrive",
											"type": "DatasetReference",
											"parameters": {
												"SourcePath": {
													"value": "@item().SourcePath",
													"type": "Expression"
												},
												"SourceColumnDelimiter": {
													"value": "@item().SourceColumnDelimiter",
													"type": "Expression"
												},
												"SourceEncoding": {
													"value": "@item().SourceEncoding",
													"type": "Expression"
												},
												"SourceEscapeCharacter": {
													"value": "@item().SourceEscapeCharacter",
													"type": "Expression"
												},
												"SourceQuoteCharacter": {
													"value": "@item().SourceQuoteCharacter",
													"type": "Expression"
												},
												"SourceRowDelimiter": {
													"value": "@item().SourceRowDelimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_DB_movies_stg",
											"type": "DatasetReference",
											"parameters": {
												"DestinationSchema": {
													"value": "@item().DestinationSchema",
													"type": "Expression"
												},
												"DestinationTable": {
													"value": "@item().DestinationTable",
													"type": "Expression"
												},
												"MappingColumns": {
													"value": "@item().MappingColumns",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP AuditLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[insert_audit]",
										"storedProcedureParameters": {
											"copy_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.copyDuration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"diu_value": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"end_time": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"meter_type": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"num_copied_rows": {
												"value": {
													"value": "@activity('Copy files meta-data').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"num_processed_files": {
												"value": {
													"value": "@activity('Copy files meta-data').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"num_read_rows": {
												"value": {
													"value": "@activity('Copy files meta-data').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"parallel_copies_value": {
												"value": {
													"value": "@activity('Copy files meta-data').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"queue_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].profile.queue.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"transfer_duration": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"unit": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azure_mentoring_ns2_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP ErrorsHandling",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[insert_errorlog]",
										"storedProcedureParameters": {
											"activity_name": {
												"value": {
													"value": "@activity('Copy files meta-data').output.billingReference.activityType",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_code": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].Code",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_datetime": {
												"value": {
													"value": "@activity('Copy files meta-data').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_message": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('Copy files meta-data').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azure_mentoring_ns2_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "status",
										"value": "Status of pipeline Failed"
									}
								},
								{
									"name": "Set variable2",
									"description": "Status of pipeline Success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy files meta-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "status",
										"value": "Status of pipeline Success"
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set variable2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipelineWeb",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Header": "success pipeline ",
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Pipeline1_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipelineWeb",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Header": "failed pipeline",
											"Error": {
												"value": "@{activity('Copy files meta-data').output.errors[0].Message}",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "Nataliia_Susiak@epam.com"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T17:00:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_etl_tControlMetadata')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_metadatadrive')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_movies_stg')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]",
				"[concat(variables('factoryId'), '/pipelines/pipelineWeb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_files_json_increment_to_ADLS_raw_online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy increment online From Blob to ADL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastStartWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{activity('GetLastStartWatermark').output.firstRow.MaxWatermark}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"path": "serviceName"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"path": "serviceCode"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"path": "movieId"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "userId"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"path": "price"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"path": "id"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"path": "datetime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_storage_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastStartWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "exec  [dbo].[spGetMaxWatermark] 'online'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_dbo_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SP spInsertMaxWatermarkNewStartPipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy increment online From Blob to ADL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spInsertMaxWatermarkNewStartPipeline]",
							"storedProcedureParameters": {
								"TableName": {
									"value": "online",
									"type": "String"
								},
								"StartPipeline": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-01T21:36:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_storage_online')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_watermarktable')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_files_to_ADLS_raw_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy files from blob storage to datalake  raw_movies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMdd_HHmmss.fff'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_storage_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:28:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_storage_movies')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_files_to_ADLS_raw_movies_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy files to archive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_datalake_raw_movies_archive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:05:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/datasets/ds_datalake_raw_movies_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_files_to_ADLS_raw_online_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy files to archive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_online_archive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T10:38:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_online_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_increment_to_DB_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy increment cinematickets onprem to Azure",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastStartWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * \nfrom [dbo].[Tickets]\nwhere TransactionDt > '@{activity('GetLastStartWatermark').output.firstRow.MaxWatermark}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[cinema_tickets]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onprem_cinematickets_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastStartWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "exec  [dbo].[spGetMaxWatermark] 'cinema_tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_dbo_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "InsertMaxWatermarkNew",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy increment cinematickets onprem to Azure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "exec [dbo].[spInsertMaxWatermarkNew] 'cinema_tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_dbo_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-13T18:57:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_onprem_cinematickets_tickets')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_cinema_tickets')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_watermarktable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_increment_to_DB_cinema_tickets_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetLastStartWatermark_copy1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "exec  [dbo].[spInsertMaxWatermarkNew] 'cinema_tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_dbo_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T00:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_watermarktable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_ratings_zip_to_ADLS_raw_rating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_ds_azurementoringdatalakns2_raw_rating",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_datalake_au_rating_rating_zip",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_datalake_raw_rating_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T22:19:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datalake_au_rating_rating_zip')]",
				"[concat(variables('factoryId'), '/datasets/ds_datalake_raw_rating_binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_files_from_ADLS_raw_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete files from ADLS raw_movies",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linked_service_azurementoringdatalakns2",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:15:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_files_from_ADLS_raw_online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete files from ADLS raw_online",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ADLS_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linked_service_azurementoringdatalakns2",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T10:38:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_online')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_3NF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "spPopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulatetRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T22:19:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_3NF_after_increment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "spPopulateCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-08T22:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_3NF_online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy from csv (movies_metadata.csv) to Azure DB (azure-mentoring-ns2.database.windows.net)",
				"activities": [
					{
						"name": "spPopulateOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateOnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Level_1"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T09:45:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/old_copy_increment_to_DB_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy increment cinematickets onprem to Azure_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastStartWatermark_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * \nfrom [dbo].[Tickets]\nwhere TransactionDt >= '@{activity('GetLastStartWatermark_copy2').output.firstRow.WatermarkStartValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[cinema_tickets]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onprem_cinematickets_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastStartWatermark_copy2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "exec  [dbo].[spGetLastStartWatermark] 'cinema_tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_DB_dbo_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T00:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_onprem_cinematickets_tickets')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_cinema_tickets')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_watermarktable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1_copy1_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMdd_HHmmss.fff'), '.csv')",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "linked_service_azurementoringdatalakns2",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_storage_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Other pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:05:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_storage_movies')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "w\\out forEach",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "*.csv",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMdd_HHmmss.fff'), '.csv')\n",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "linked_service_azurementoringdatalakns2",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Other pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:05:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobStorage')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1_copy2_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "w\\out forEach",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "*.csv",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(formatDateTime(utcNow(),'_yyyyMMdd_HHmmss.fff'), '.csv')\n",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "linked_service_azurementoringdatalakns2",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobStorage",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ADLS_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Other pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T23:05:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobStorage')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_movies')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWeb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGET",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebSend",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{   \n    \"header\":\"@{pipeline().parameters.Header}\",\n    \"dataFactoryName\":\"@{pipeline().parameters.DataFactoryName}\",\n    \"pipelineId\":\"@{pipeline().parameters.PipelineId}\",\n    \"pipelineName\":\"@{pipeline().parameters.PipelineName}\",\n    \"error\":\"@{pipeline().parameters.Error}\",\n    \"receiver\":\"@{pipeline().parameters.Reciever}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Header": {
						"type": "string",
						"defaultValue": "header"
					},
					"Reciever": {
						"type": "string",
						"defaultValue": "Nataliia_Susiak@epam.com"
					},
					"Error": {
						"type": "string",
						"defaultValue": "No errors"
					},
					"DataFactoryName": {
						"type": "string",
						"defaultValue": "data factory name"
					},
					"PipelineId": {
						"type": "string",
						"defaultValue": "pipeline id"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "pipeline name"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T16:50:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWeb_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGET",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebSend",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Failed pipeline with run ID 111",
								"dataFactoryName": "DataFactory",
								"pipelineName": "Pipeline",
								"errorMsg": "Error",
								"receiver": "Nataliia_Susiak@epam.com"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": "failed"
						}
					},
					{
						"name": "WebSend_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Failed @{activity('Set variable1').output.value} pipeline with run ID @{pipeline().parameters.pipelineid}",
								"dataFactoryName": "DataFactory",
								"pipelineName": "Pipeline",
								"errorMsg": "Error",
								"receiver": "Nataliia_Susiak@epam.com"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineid": {
						"type": "string"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"idddd": {
						"type": "String",
						"defaultValue": "121212"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T15:46:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWeb_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGET",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebSend",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Failed pipeline with run ID 111",
								"dataFactoryName": "DataFactory",
								"pipelineName": "Pipeline",
								"errorMsg": "Error",
								"receiver": "Nataliia_Susiak@epam.com"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vvv",
							"value": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subject": {
						"type": "string"
					}
				},
				"variables": {
					"vvv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T15:46:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_metadatadrive_new",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-10T17:33:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_metadatadrive_new')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_example_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADLS_raw_metadatadrive_new",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_DB_stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-10T17:33:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ADLS_raw_metadatadrive_new')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_stg_credits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/run_DF_Dim_Tables_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TRUNCATE Dim Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Dim_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dsDBtMovies": {},
									"tMovieStatus": {},
									"dsOnlineService": {},
									"DimMovie": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TRUNCATE Dim Tables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB_DataMart",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "  TRUNCATE TABLE [dbo].[DimMovie];\n  TRUNCATE TABLE [dbo].[DimOnlineService];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T20:02:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Dim_Tables')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/run_DF_Fact_Increment_Tables_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactIncrementTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Fact_Tables_Increment",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dsDBtOnlinePurchase": {},
									"tOnlineService": {},
									"dboDimOnlineService": {},
									"tMovies": {},
									"DimMovie": {},
									"FactOnlinePurchaseTRG": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseIncrementUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T20:55:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Fact_Tables_Increment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/run_DF_Fact_Tables_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TRUNCATE Dim Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Fact_Tables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dsDBtOnlinePurchase": {},
									"tOnlineService": {},
									"dboDimOnlineService": {},
									"tMovies": {},
									"DimMovie": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TRUNCATE Dim Tables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azure_mentoring_ns2_DB_DataMart",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [dbo].[FactOnlinePurchase];\nTRUNCATE TABLE [dbo].[FactOnlinePurchase_MonthlySnapshot];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T20:02:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Fact_Tables')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringstoragens2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringstoragens2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_metadatadrive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourcePath": {
						"type": "string"
					},
					"SourceColumnDelimiter": {
						"type": "string"
					},
					"SourceEncoding": {
						"type": "string"
					},
					"SourceEscapeCharacter": {
						"type": "string"
					},
					"SourceQuoteCharacter": {
						"type": "string"
					},
					"SourceRowDelimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().SourcePath",
							"type": "Expression"
						},
						"folderPath": "metadata-drive",
						"fileSystem": "raw"
					},
					"columnDelimiter": {
						"value": "@dataset().SourceColumnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": {
						"value": "@dataset().SourceRowDelimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().SourceEncoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().SourceEscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().SourceQuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_metadatadrive_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "credits.csv",
						"folderPath": "metadata-drive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_movies_credits_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "credits_*",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_movies_movies_metadata_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movies_metadata_",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "adult",
						"type": "String"
					},
					{
						"name": "belongs_to_collection",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "homepage",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "imdb_id",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "original_title",
						"type": "String"
					},
					{
						"name": "overview",
						"type": "String"
					},
					{
						"name": "popularity",
						"type": "String"
					},
					{
						"name": "poster_path",
						"type": "String"
					},
					{
						"name": "production_companies",
						"type": "String"
					},
					{
						"name": "production_countries",
						"type": "String"
					},
					{
						"name": "release_date",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "runtime",
						"type": "String"
					},
					{
						"name": "spoken_languages",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "video",
						"type": "String"
					},
					{
						"name": "vote_average",
						"type": "String"
					},
					{
						"name": "vote_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_movies_ratings_part_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ratings_part*",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADLS_raw_online_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_DataMart_dbo_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_DataMart_dbo_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_Datamart_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_FactOnlinePurchaseIncrement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB_DataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchaseIncrement"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB_DataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_tMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_dbo_watermarktable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkStartValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WatermarkEndValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Is_latest",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_etl_tControlMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourcePath",
						"type": "nvarchar"
					},
					{
						"name": "SourceColumnDelimiter",
						"type": "nvarchar"
					},
					{
						"name": "SourceEncoding",
						"type": "nvarchar"
					},
					{
						"name": "SourceEscapeCharacter",
						"type": "nvarchar"
					},
					{
						"name": "SourceQuoteCharacter",
						"type": "nvarchar"
					},
					{
						"name": "DestinationSchema",
						"type": "nvarchar"
					},
					{
						"name": "DestinationTable",
						"type": "nvarchar"
					},
					{
						"name": "DIUValue",
						"type": "nvarchar"
					},
					{
						"name": "SourceColumnMapping",
						"type": "nvarchar"
					},
					{
						"name": "DestinationColumnMapping",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_movies_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationSchema": {
						"type": "string"
					},
					"DestinationTable": {
						"type": "string"
					},
					"MappingColumns": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().DestinationSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().DestinationTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_stg_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_stg_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_stg_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "adult",
						"type": "nvarchar"
					},
					{
						"name": "belongs_to_collection",
						"type": "nvarchar"
					},
					{
						"name": "budget",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "homepage",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "imdb_id",
						"type": "nvarchar"
					},
					{
						"name": "original_language",
						"type": "nvarchar"
					},
					{
						"name": "original_title",
						"type": "nvarchar"
					},
					{
						"name": "overview",
						"type": "nvarchar"
					},
					{
						"name": "popularity",
						"type": "nvarchar"
					},
					{
						"name": "poster_path",
						"type": "nvarchar"
					},
					{
						"name": "production_companies",
						"type": "nvarchar"
					},
					{
						"name": "production_countries",
						"type": "nvarchar"
					},
					{
						"name": "release_date",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "runtime",
						"type": "nvarchar"
					},
					{
						"name": "spoken_languages",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "tagline",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "video",
						"type": "nvarchar"
					},
					{
						"name": "vote_average",
						"type": "nvarchar"
					},
					{
						"name": "vote_count",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_stg_online_purchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DB_stg_rating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_mentoring_ns2_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_mentoring_ns2_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_storage_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringstoragens2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringstoragens2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_storage_movies_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringstoragens2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "credits.csv",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringstoragens2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_storage_movies_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringstoragens2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies_metadata.csv",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringstoragens2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_storage_online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringstoragens2_online",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringstoragens2_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_au_rating_rating_zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringauns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ratings.zip",
						"container": "raiting"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringauns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_raw_movies_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_raw_rating_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_azurementoringdatalakns2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('rating',formatDateTime(utcNow(),'_yyyyMMdd_HHmmss.fff'), '.zip')",
							"type": "Expression"
						},
						"folderPath": "rating",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_azurementoringdatalakns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_cinematickets_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_onprem_sqlserver_key_vault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_onprem_sqlserver_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem_dbo_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_service_onprem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_service_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_mentoring_ns2_DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azure_mentoring_ns2_DB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_mentoring_ns2_DB_DataMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azure_mentoring_ns2_DB_DataMart_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_server_mentoring_key_vault_ns2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('linked_server_mentoring_key_vault_ns2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_azurementoringauns2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linked_service_azurementoringauns2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_azurementoringdatalakns2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linked_service_azurementoringdatalakns2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linked_service_azurementoringdatalakns2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_azurementoringstoragens2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linked_service_azurementoringstoragens2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_azurementoringstoragens2_online')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linked_service_azurementoringstoragens2_online_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_onprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('linked_service_onprem_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_service_onprem_sqlserver_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "linked_server_mentoring_key_vault_ns2",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('linked_service_onprem_sqlserver_key_vault_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_server_mentoring_key_vault_ns2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-03-12T22:33:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Dim_Tables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "dsDBtMovies"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "dsOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnsDimMovie"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumnDimOnlineService"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dsDBtMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovieStatus",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dsOnlineService",
						"lookup1 derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> DerivedColumnsDimMovie",
						"dsDBtMovies, tMovieStatus lookup(dsDBtMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"dsOnlineService derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> derivedColumnDimOnlineService",
						"DerivedColumnsDimMovie sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovie",
						"derivedColumnDimOnlineService sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Fact_Tables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "dsDBtOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "dboDimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_Datamart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "lookupServiceKey"
						},
						{
							"name": "Select1ColumnstOnlinePurchase"
						},
						{
							"name": "jointOnlineService"
						},
						{
							"name": "select2OnlinePurchase"
						},
						{
							"name": "select3tOnlinePurchase"
						},
						{
							"name": "derivedDateKey"
						},
						{
							"name": "lookupMovieKey"
						},
						{
							"name": "select5Result"
						},
						{
							"name": "MonthKey"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select6tMovies"
						},
						{
							"name": "select7MovieKey"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "select8MovieKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dsDBtOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dboDimOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"select2OnlinePurchase, dboDimOnlineService lookup(select2OnlinePurchase@ServiceCode == dboDimOnlineService@ServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupServiceKey",
						"dsDBtOnlinePurchase select(mapColumn(",
						"          ServiceId,",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select1ColumnstOnlinePurchase",
						"Select1ColumnstOnlinePurchase, tOnlineService join(Select1ColumnstOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointOnlineService",
						"jointOnlineService select(mapColumn(",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2OnlinePurchase",
						"lookupServiceKey select(mapColumn(",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3tOnlinePurchase",
						"select3tOnlinePurchase derive(DateKey = toInteger(toString(fromUTC(TransactionDate),'yyyyMMdd'))) ~> derivedDateKey",
						"derivedDateKey, select8MovieKey lookup(select3tOnlinePurchase@MovieId == select8MovieKey@MovieId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupMovieKey",
						"lookupMovieKey select(mapColumn(",
						"          Price,",
						"          TransactionId,",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5Result",
						"select3tOnlinePurchase derive(MonthKey = toInteger(toString(fromUTC(TransactionDate),'yyyyMM'))) ~> MonthKey",
						"MonthKey aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate1",
						"tMovies select(mapColumn(",
						"          MovieId,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6tMovies",
						"DimMovie select(mapColumn(",
						"          MovieKey,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7MovieKey",
						"select6tMovies, select7MovieKey join(select6tMovies@MovieIdNK == select7MovieKey@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey select(mapColumn(",
						"          MovieId,",
						"          MovieKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8MovieKey",
						"select5Result sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_Datamart_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Fact_Tables_Increment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "dsDBtOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "dboDimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_FactOnlinePurchaseIncrement",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseTRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_FactOnlinePurchaseIncrement",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_FactOnlinePurchaseIncrement",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseIncrementUpdate"
						}
					],
					"transformations": [
						{
							"name": "lookupServiceKey"
						},
						{
							"name": "Select1ColumnstOnlinePurchase"
						},
						{
							"name": "jointOnlineService"
						},
						{
							"name": "select2OnlinePurchase"
						},
						{
							"name": "select3tOnlinePurchase"
						},
						{
							"name": "derivedDateKey"
						},
						{
							"name": "lookupMovieKey"
						},
						{
							"name": "select5Result"
						},
						{
							"name": "select6tMovies"
						},
						{
							"name": "select7MovieKey"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "select8MovieKey"
						},
						{
							"name": "AddHashTRG"
						},
						{
							"name": "NewAndUpdatedRows"
						},
						{
							"name": "AddHashSRC"
						},
						{
							"name": "select9DropUnusedColumns"
						},
						{
							"name": "join1"
						},
						{
							"name": "select10Update"
						},
						{
							"name": "exists1"
						},
						{
							"name": "exists2"
						},
						{
							"name": "derivedNewUpdatedDate"
						},
						{
							"name": "select11"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dsDBtOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dboDimOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactOnlinePurchaseTRG",
						"select2OnlinePurchase, dboDimOnlineService lookup(select2OnlinePurchase@ServiceCode == dboDimOnlineService@ServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupServiceKey",
						"dsDBtOnlinePurchase select(mapColumn(",
						"          ServiceId,",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select1ColumnstOnlinePurchase",
						"Select1ColumnstOnlinePurchase, tOnlineService join(Select1ColumnstOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointOnlineService",
						"jointOnlineService select(mapColumn(",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2OnlinePurchase",
						"lookupServiceKey select(mapColumn(",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3tOnlinePurchase",
						"select3tOnlinePurchase derive(DateKey = toInteger(toString(fromUTC(TransactionDate),'yyyyMMdd'))) ~> derivedDateKey",
						"derivedDateKey, select8MovieKey lookup(select3tOnlinePurchase@MovieId == select8MovieKey@MovieId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupMovieKey",
						"lookupMovieKey select(mapColumn(",
						"          Price,",
						"          TransactionId,",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5Result",
						"tMovies select(mapColumn(",
						"          MovieId,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6tMovies",
						"DimMovie select(mapColumn(",
						"          MovieKey,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7MovieKey",
						"select6tMovies, select7MovieKey join(select6tMovies@MovieIdNK == select7MovieKey@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey select(mapColumn(",
						"          MovieId,",
						"          MovieKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8MovieKey",
						"FactOnlinePurchaseTRG derive(columns_hash = md5(byNames(split('DateKey,OnlineServiceKey,MovieKey,Price',',')))) ~> AddHashTRG",
						"AddHashSRC, AddHashTRG exists(select5Result@TransactionId == FactOnlinePurchaseTRG@TransactionId,",
						"     negate:true,",
						"     broadcast: 'auto')~> NewAndUpdatedRows",
						"select5Result derive(columns_hash = md5(byNames(split('DateKey,OnlineServiceKey,MovieKey,Price',','))),",
						"          CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> AddHashSRC",
						"NewAndUpdatedRows select(mapColumn(",
						"          Price,",
						"          TransactionId,",
						"          DateKey,",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9DropUnusedColumns",
						"AddHashTRG, AddHashSRC join(FactOnlinePurchaseTRG@TransactionId == select5Result@TransactionId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          TransactionId = FactOnlinePurchaseTRG@TransactionId,",
						"          Price = select5Result@Price,",
						"          DateKey = select5Result@DateKey,",
						"          OnlineServiceKey = select5Result@OnlineServiceKey,",
						"          MovieKey = select5Result@MovieKey,",
						"          CreatedDate = AddHashSRC@CreatedDate,",
						"          ModifiedDate = AddHashSRC@ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10Update",
						"AddHashTRG, AddHashSRC exists(FactOnlinePurchaseTRG@TransactionId == select5Result@TransactionId",
						"     && AddHashTRG@columns_hash == AddHashSRC@columns_hash,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"select10Update, exists1 exists(select10Update@TransactionId == FactOnlinePurchaseTRG@TransactionId,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 derive(ModifiedDate = currentUTC()) ~> derivedNewUpdatedDate",
						"derivedNewUpdatedDate select(mapColumn(",
						"          TransactionId,",
						"          Price,",
						"          DateKey,",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"select11 alterRow(updateIf(true())) ~> alterRow1",
						"select9DropUnusedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> FactOnlinePurchase",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId,",
						"          ModifiedDate",
						"     )) ~> FactOnlinePurchaseIncrementUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_FactOnlinePurchaseIncrement')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Fact_Tables_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "dsDBtOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "ds_DB_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "dboDimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_DB_Datamart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookupServiceKey"
						},
						{
							"name": "Select1ColumnstOnlinePurchase"
						},
						{
							"name": "jointOnlineService"
						},
						{
							"name": "select2OnlinePurchase"
						},
						{
							"name": "select3tOnlinePurchase"
						},
						{
							"name": "derivedDateKey"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dsDBtOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dboDimOnlineService",
						"select2OnlinePurchase, dboDimOnlineService lookup(select2OnlinePurchase@ServiceCode == dboDimOnlineService@ServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupServiceKey",
						"dsDBtOnlinePurchase select(mapColumn(",
						"          ServiceId,",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select1ColumnstOnlinePurchase",
						"Select1ColumnstOnlinePurchase, tOnlineService join(Select1ColumnstOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointOnlineService",
						"jointOnlineService select(mapColumn(",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2OnlinePurchase",
						"lookupServiceKey select(mapColumn(",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          ServiceKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3tOnlinePurchase",
						"select3tOnlinePurchase derive(MonthKey = toInteger(toString(fromUTC(TransactionDate),'yyyyMM'))) ~> derivedDateKey",
						"derivedDateKey aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/ds_DB_Datamart_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWeb_copy3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGET",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://mentoring-key-vault-ns2.vault.azure.net/secrets/LogicAppsHTTP/a11ddadb848b49fbab63c095358f2503?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebSend",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Failed pipeline with run ID 111",
								"dataFactoryName": "DataFactory",
								"pipelineName": "Pipeline",
								"errorMsg": "Error",
								"receiver": "Nataliia_Susiak@epam.com"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebGET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vvv",
							"value": {
								"value": "@activity('WebGET').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subject": {
						"type": "string"
					}
				},
				"variables": {
					"vvv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"Status2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T15:46:43Z"
			},
			"dependsOn": []
		}
	]
}